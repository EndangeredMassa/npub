// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var debug, fs, mkdirp, repeat, touch;
  fs = require('fs');
  mkdirp = require('mkdirp');
  touch = require('touch');
  debug = require('debug')('changelog');
  repeat = function (pattern, count) {
    var arr;
    arr = function (accum$) {
      var idx;
      for (var cache$ = function () {
            var accum$1;
            accum$1 = [];
            for (var i$ = 1; 1 <= count ? i$ <= count : i$ >= count; 1 <= count ? ++i$ : --i$)
              accum$1.push(i$);
            return accum$1;
          }.apply(this, arguments), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        idx = cache$[i$];
        accum$.push(pattern);
      }
      return accum$;
    }.call(this, []);
    return arr.join('');
  };
  module.exports = function (dir, git) {
    var changelogPath;
    changelogPath = '' + dir + '/CHANGELOG.md';
    return {
      build: function (version, callback) {
        var currentChangelog;
        debug('build');
        touch.sync(changelogPath);
        currentChangelog = fs.readFileSync(changelogPath);
        return git.diffSinceLastTag(function (err, commits) {
          var completeDiff;
          if (null != err)
            return callback(err, commits);
          completeDiff = [
            version,
            repeat('-', version.length),
            commits,
            currentChangelog
          ].join('\n');
          debug('prepend addition');
          return callback(null, completeDiff);
        });
      },
      write: function (changelog, filePath) {
        if (null == filePath)
          filePath = '/tmp/npub/changelog.md';
        mkdirp.sync('/tmp/npub');
        fs.writeFileSync(filePath, changelog, { flag: 'w' });
        debug('wrote ' + filePath);
        return filePath;
      },
      update: function (filePath) {
        var newChangelog;
        debug('update from ' + filePath);
        touch.sync(changelogPath);
        newChangelog = fs.readFileSync(filePath);
        return this.write(newChangelog, changelogPath);
      }
    };
  };
}.call(this);
