// Generated by CoffeeScript 1.9.1
var Changelog, EndIf, Git, Npm, commitChanges, debug, fs, isPrivate, openEditor, prep, prompt, test, updateVersion, verify;

fs = require('fs');

debug = require('debug')('publish');

prep = require('../prep');

verify = require('../verify');

Changelog = require('./changelog');

openEditor = require('./editor');

updateVersion = require('./version');

commitChanges = require('./commit-changes');

Npm = require('./npm');

Git = require('../git');

test = require('./test');

prompt = require('./prompt');

isPrivate = require('./public');

EndIf = function(log) {
  var endIf;
  return endIf = function(exitCodeOrError, message) {
    if (exitCodeOrError == null) {
      return;
    }
    if (exitCodeOrError instanceof Error) {
      log.error(exitCodeOrError.message);
      return process.exit(1);
    } else {
      if (exitCodeOrError === 0) {
        return;
      }
      if (message == null) {
        message = "exited with " + exitCodeOrError;
      }
      log.error(message);
      return process.exit(exitCodeOrError);
    }
  };
};

module.exports = function(dir, log, config, version, testCommand) {
  var changelog, endIf, git, npm;
  debug("start");
  endIf = EndIf(log);
  git = Git(dir);
  npm = Npm(dir, log);
  changelog = Changelog(dir, git);
  if (isPrivate(dir)) {
    console.log('Cannot publish this package because it is private.');
    process.exit(2);
  }
  return verify(dir, function(error) {
    endIf(error);
    prep(dir, log, config);
    debug('ensured license headers');
    return verify(dir, function(error) {
      endIf(error);
      return npm.install(config.registry, function(error) {
        endIf(error);
        return test(dir, log, npm, testCommand, function(error) {
          endIf(error);
          return changelog.build(version, function(error, tempChangelog) {
            endIf(error);
            return git.getSha(function(error, sha) {
              var tempChangelogPath;
              endIf(error);
              tempChangelogPath = "/tmp/npub/changelog-" + sha + ".md";
              changelog.write(tempChangelog, tempChangelogPath);
              return openEditor(tempChangelogPath, function(error) {
                var tag;
                if (error != null) {
                  fs.unlinkSync(tempChangelogPath);
                  endIf(error);
                }
                changelog.update(tempChangelogPath);
                updateVersion(dir, version);
                tag = "v" + version;
                return commitChanges(git, tag, function(error) {
                  endIf(error);
                  return git.tag(tag, function(error) {
                    endIf(error);
                    return prompt(version, function(error) {
                      endIf(error);
                      return git.push(branch, function(error) {
                        endIf(error);
                        return git.pushTag(tag, function(error) {
                          endIf(error);
                          return npm.publish(function(error) {
                            endIf(error);
                            return log('success!');
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
};
