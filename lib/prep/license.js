// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var addLicense, ensureLicense, fs, getExtension, getSourceFiles, glob, prepend, readFile, SOURCE_FILES;
  fs = require('fs');
  glob = require('globber');
  SOURCE_FILES = {
    coffee: {
      startComment: '###',
      endComment: '###'
    }
  };
  module.exports = addLicense = function (dir, license) {
    var files;
    files = getSourceFiles(dir);
    return function (accum$) {
      var file;
      for (var i$ = 0, length$ = files.length; i$ < length$; ++i$) {
        file = files[i$];
        accum$.push(ensureLicense(file, license));
      }
      return accum$;
    }.call(this, []);
  };
  readFile = function (filePath) {
    var buffer;
    buffer = fs.readFileSync(filePath);
    return buffer.toString();
  };
  getExtension = function (path) {
    return path.split('.').pop();
  };
  getSourceFiles = function (dir) {
    var files, options;
    options = {
      exclude: [
        'node_modules',
        'test'
      ],
      recursive: true,
      includeDirectories: false
    };
    files = glob.sync(dir, options);
    files = files.map(function (file) {
      return {
        path: file,
        ext: getExtension(file)
      };
    });
    return files.filter(function (file) {
      return in$(file.ext, Object.keys(SOURCE_FILES));
    });
  };
  ensureLicense = function (file, license) {
    var cache$, endComment, newline, startComment;
    file.content = readFile(file.path);
    newline = '\n';
    cache$ = SOURCE_FILES[file.ext];
    startComment = cache$.startComment;
    endComment = cache$.endComment;
    license = startComment + newline + license + endComment + newline + newline;
    if (file.content.indexOf(license) !== 0) {
      console.log('' + file.path + ': adding license');
      return prepend(file, license);
    }
  };
  prepend = function (file, license) {
    var newFile, tempFilePath;
    newFile = license + file.content;
    tempFilePath = '' + file.path + '_tmp';
    fs.writeFileSync(tempFilePath, newFile);
    return fs.renameSync(tempFilePath, file.path);
  };
  function in$(member, list) {
    for (var i = 0, length = list.length; i < length; ++i)
      if (i in list && list[i] === member)
        return true;
    return false;
  }
}.call(this);
