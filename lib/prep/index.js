// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var addLicense, endsWith, endsWithAny, ensureLicense, fs, getSourceFiles, glob, prepend, readFile, SOURCE_FILES;
  fs = require('fs');
  glob = require('globber');
  SOURCE_FILES = [
    '.coffee',
    '.js'
  ];
  readFile = function (filePath) {
    var buffer;
    buffer = fs.readFileSync(filePath);
    return buffer.toString();
  };
  module.exports = function (dir) {
    var license;
    license = readFile('' + dir + '/LICENSE');
    if (null != license)
      return addLicense(dir, license);
  };
  endsWith = function (string, ending) {
    return string.indexOf(ending, string.length - ending.length) !== -1;
  };
  endsWithAny = function (string, endings) {
    var ending;
    for (var i$ = 0, length$ = endings.length; i$ < length$; ++i$) {
      ending = endings[i$];
      if (endsWith(string, ending))
        return true;
    }
    return false;
  };
  getSourceFiles = function (dir) {
    var files, options;
    options = {
      exclude: 'node_modules',
      recursive: true,
      includeDirectories: false
    };
    files = glob.sync(dir, options);
    return files.filter(function (file) {
      return endsWithAny(file, SOURCE_FILES);
    });
  };
  addLicense = function (dir, license) {
    var files;
    files = getSourceFiles(dir);
    console.log(JSON.stringify(files));
    return function (accum$) {
      var file;
      for (var i$ = 0, length$ = files.length; i$ < length$; ++i$) {
        file = files[i$];
        accum$.push(ensureLicense(file, license));
      }
      return accum$;
    }.call(this, []);
  };
  ensureLicense = function (filePath, license) {
    var file;
    file = readFile(filePath);
    if (file.indexOf(license) !== 0) {
      console.log('filePath: adding license');
      return prepend(filePath, file, license);
    }
  };
  prepend = function (filePath, file, license) {
    var newFile, tempFilePath;
    newFile = license + '\n' + file;
    tempFilePath = '' + filepath + '_tmp';
    fs.writeFileSync(tempFilePath, newFile);
    return fs.renameSync(tempFilePath, filePath);
  };
}.call(this);
